@page "/PendingRequests"
@using PetShelter.Data

@inject PendingRequestsService PendingRequestsService


<h1>Pending Requests</h1>
<h3>Requested Adoptions</h3>
<div class="container">
    <div class="row">
        @if (_requestedAdoptions!.Count == 0)
        {
            <p>
                There are no requested adoptions.
            </p>
        }
        @foreach (var adoption in _requestedAdoptions)
        {
            <PendingRequestCard Pet=@adoption.Item1 Adoption=@adoption.Item2 Decide=@true UpdatePage=@UpdatePage/>
        }
    </div>
</div>
<h3>Requested Deliveries</h3>
<div class="container">
    <div class="row">
        @if (_requestedDeliveries!.Count == 0)
        {
            <p>
                There are no requested deliveries.
            </p>
        }
        @foreach (var delivery in _requestedDeliveries)
        {
            <PendingRequestCard Pet=@delivery.Item1 Delivery=@delivery.Item2 Decide=@true UpdatePage=@UpdatePage/>
        }
    </div>
</div>
<h3>Accepted Adoptions</h3>
<div class="container">
    <div class="row">
        @if (_acceptedAdoptions!.Count == 0)
        {
            <p>
                There are no accepted adoptions.
            </p>
        }
        @foreach (var adoption in _acceptedAdoptions)
        {
            <PendingRequestCard Pet=@adoption.Item1 Adoption=@adoption.Item2 Decide=@false UpdatePage=@UpdatePage/>
        }
    </div>
</div>
<h3>Accepted Deliveries</h3>
<div class="container">
    <div class="row">
        @if (_acceptedDeliveries!.Count == 0)
        {
            <p>
                There are no accepted deliveries.
            </p>
        }
        @foreach (var delivery in _acceptedDeliveries)
        {
            <PendingRequestCard Pet=@delivery.Item1 Delivery=@delivery.Item2 Decide=@false UpdatePage=@UpdatePage/>
        }
    </div>
</div>

@code {

    private List<Tuple<Pet, PetAdoption>>? _requestedAdoptions;
    private List<Tuple<Pet, Delivery>>? _requestedDeliveries;
    private List<Tuple<Pet, PetAdoption>>? _acceptedAdoptions;
    private List<Tuple<Pet, Delivery>>? _acceptedDeliveries;


    protected override Task OnInitializedAsync()
    {
        UpdatePage();
        return Task.CompletedTask;
    }

    public void UpdatePage()
    {
        _requestedAdoptions = PendingRequestsService.GetRequestedAdoptions();
        _requestedDeliveries = PendingRequestsService.GetRequestedDeliveries();
        _acceptedAdoptions = PendingRequestsService.GetAcceptedAdoptions();
        _acceptedDeliveries = PendingRequestsService.GetAcceptedDeliveries();
        StateHasChanged();
    }

}