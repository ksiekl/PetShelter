@using PetShelter.Data
@inject PendingRequestsService PendingRequestsService

<div class="col-md-6 col-lg-3 mb-4" xmlns="http://www.w3.org/1999/html">
    <div class="card">
        <div class="card-block">
            <img class="card-img-top img-fluid" src=@Pet.Picture style="width: 100%; height: 15vw; object-fit: cover">
            <div class="card-body">
                <h5 class="card-title">@Pet.Name</h5>
                <p class="card-text">@Pet.Description</p>

                <ul class="list-group list-group-flush">
                    <li class="list-group-item">Animal: @Pet.Type</li>
                    <li class="list-group-item">Breed: @Pet.Breed</li>
                    <li class="list-group-item">
                        Age: @Pet.Age @AgeToShow
                    </li>
                    @if (Decide)
                    {
                        <div class="form-group row">
                            <div class="col-md-6">
                                <button type="button" class="btn btn-primary form-control" @onclick="() => ChangeStatus(Status.Accepted)">Accept</button>
                            </div>
                            <div class="col-md-6">
                                <button type="button" class="btn btn-primary form-control" @onclick="() => ChangeStatus(Status.Declined)">Decline</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <button type="button" class="btn btn-primary" @onclick="() => ChangeStatus(Status.Finished)">Complete Request</button>
                        </div>
                    }
                </ul>
            </div>
        </div>


    </div>
</div>

@code {

    [Parameter]
    public Pet Pet { get; set; }

    [Parameter]
    public PetAdoption? Adoption { get; set; }

    [Parameter]
    public Delivery? Delivery { get; set; }

    [Parameter]
    public bool Decide { get; set; }
    
    public string? AgeToShow;

    protected override void OnInitialized()
    {
        AgeToShow = Pet.Age switch
        {
            null => "Unknown",
            > 1 => "years",
            _ => "year"
            };
    }

    private async Task ChangeStatus(Status status)
    {
        if (Adoption != null)
        {
            Adoption.Status = status;
            await PendingRequestsService.UpdateAdoptions(Adoption);
            StateHasChanged();
            return;
        }
        Delivery!.Status = status;
        await PendingRequestsService.UpdateDeliveries(Delivery);
        StateHasChanged();

    }

}